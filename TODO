- write function to add default value to the:
	- index (index.html by default)


HTTPResponse:
- write as a separate function which handles proper routing:
	- security check (will be done by asagymba)
	- index.html by default
	- proper error code return
	- routing throw location
		- proper validation of access + custom error pages is possible as well?? (not implemented)
	- this function should set proper error_code and return full path or "" in return (can be disscussed)

- probable it should be beneficial to add map header:value and then when building a header it just add everything to the response header (I don't now for now how our header will vary)


HTTPResponse.cpp:
190: std::string::size_type pos = path.find_first_of("?#");
	?
201: if (!realpath(full_path.c_str(), resolved)) {
	realpath() isn't on the allowed syscalls list.

inet_pton():
	Syscall is forbidden. Rewrite.

HTTPResponse::get_mime_type: return reference instead

Location::_upload_enabled => ? What if POST is allowed but _upload_enabled is false?
	Get rid of this.
	Also get rid of upload_path.
		UPD: Do not get rid of this thingy :(

ClientConnection::getMaxBodySize(): return this->_server->getClientMaxBodySize();
	Is this a fine default behavior if root wasn't found?
	Also, should we skip the Location '/' until the very end?

Location::_client_max_body_size
	In POST, we don't treat this as the maximum file size,
	but the max buffer size for that file.

	Reasoning: if using chunked encoding, we can send a 50 MB file
		with hella lot chunks of 1 byte each.

	Should we change this behavior or is it fine as is?

HTTPRequest.cpp:
	Throw exception if Host header isn't present.


Location parsing:
	If any location target is contained in any other location target (std::string.compare())
	=> parsing error.

HTTPResponse:: handle_response_routine.

Config parser:
	Server must support allow_methods
		If allow_methods directive isn't present => GET is set
			by default.

REMAINING:
	ClientConnection (handleWriteEvent())
	HTTPResponse
	ServerManager

"Warning: location path ... does not exist at parse time."
	Location path is a request target redirection / configuration change.
	We need to check for the optional root parameter in a location directive,
		not the location path.

HTTPRequest:
	Instead of get_request_target_filename(),
	should we just implement a method,
	that would return the request target
		stripped of location's path?
