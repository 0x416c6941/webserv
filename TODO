- move validateFile function to utils to reuse latter
+ write function to validate that there's no duplicated address
	(any host + port combination + full endpointlisten)
- write function to add default value to the:
	+ root = "./"
	+ host = "0.0.0.0" (if there's port, but no host and endpointlisten)
	- index (index.html by default)
	- default_error_pages (default one)
+ create default error_pages
- check if all file descriptors, including epoll, are properly closed during:
	some connection removal;
	program closing.


HTTPRequest should not throw an error, but return error code or smthing like that
write wrapper for HTTPRequest to catch errors and return error code

In conf file can be specified: large_client_header_buffers (we don't support it)

HTTPRequest should not parse until obtain entire header
	- url can be very long as well as header -> set in httpreques max_header_size(we didn't implement it in ServerConfig)
		also chceck _client_max_body_size -> we have implemented it in ServerConfig
	- untill header is finished do not parse! if there will be corrupted msg without \r\t\r\t -> close connection by timeout or just leave as it is (Konstantin advise)


HTTPResponse:
- write as a separate function which handles proper routing:
	- security check
	- index.html by default
	- proper error code return
	- routing throw location
		- proper validation of access + custom error pages is possible as well?? (not implemented)
	- this function should set proper error_code and return full path or "" in return (can be disscussed)

- probable it should be beneficial to add map header:value and then when building a header it just add everything to the response header (I don't now for now how our header will vary)


- Parsing logic should be revised: if some of the directive is unknown - just skip and log(the same for Location).



HTTPResponse.cpp:
190: std::string::size_type pos = path.find_first_of("?#");
	?
201: if (!realpath(full_path.c_str(), resolved)) {
	realpath() isn't on the allowed syscalls list.

Location::_upload_enabled => ? What if POST is allowed but _upload_enabled is false?

ClientConnection::getMaxBodySize(): return this->_server->getClientMaxBodySize();
	Is this a fine default behavior if root wasn't found?

REMAINING:
	ClientConnection (handleWriteEvent())
	HTTPResponse
	ServerManager
